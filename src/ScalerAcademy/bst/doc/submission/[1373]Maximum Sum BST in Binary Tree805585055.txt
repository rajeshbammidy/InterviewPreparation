class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode() {
    }

    TreeNode(int val) {
        this.val = val;
    }

    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

class Solution1373 {
    int maxValue = 0;

    public int maxSumBST(TreeNode root) {
        maxValue = 0;
        getMaxSumBST(root);
        return maxValue;

    }

    private int getMaxSumBST(TreeNode root) {
        if (root != null) {
            int leftSum = getMaxSumBST(root.left);
            int rightSum = getMaxSumBST(root.right);
            if ((root.left == null || root.left.val < root.val) &&
                    (root.right == null || root.right.val > root.val)) {
                if (leftSum != Integer.MIN_VALUE && rightSum != Integer.MIN_VALUE) {
                    int sum = leftSum + rightSum + root.val;
                    maxValue = Math.max(maxValue, sum);
                    return sum;
                }
            }
            return Integer.MIN_VALUE;

        }
        return 0;
    }
}

//total_correct:null
//compile_error:Line 7: error: cannot find symbol [in __Driver__.java]
      int ret = new LeetCode.Oct22.LeetCode.DynamicProgramming.leetcode.editor.en.partition_subset.Solution().maxSumBST(param_1);
                    ^
  symbol:   class LeetCode.Oct22.LeetCode.DynamicProgramming.leetcode.editor.en.partition_subset.Solution
  location: class __DriverSolution__
